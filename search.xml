<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[apache-rocketmq集群搭建]]></title>
    <url>%2F2018%2F12%2F21%2Fapache-rocketmq%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[apache-rocketmq集群搭建环境： centos7 jdk1.8.0_65 rocketmq-4.1.0IP1:10.167.10.81IP2:10.167.10.82 IP1机器配置2m-2s-async/broker-a.properties配置 listenPort=10911namesrvAddr=10.167.10.81:9876;10.167.10.82:9876brokerIP1=10.167.10.81autoCreateTopicEnable=falseautoCreateSubscriptionGroup=truerejectTransactionMessage=falsefetchNamesrvAddrByAddressServer=falsestorePathRootDir=/apps/apache-rocketmq/store-astorePathCommitLog=/apps/apache-rocketmq/store-a/commitlogstorePathConsumeQueue=/apps/apache-rocketmq/store-a/consumequeuestorePathIndex=/apps/apache-rocketmq/store-a/indexstoreCheckpoint=/apps/apache-rocketmq/store-a/checkpointabortFile=/apps/apache-rocketmq/store-a/abortflushIntervalCommitLog=1000flushCommitLogTimed=falsemaxTransferBytesOnMessageInMemory=262144maxTransferCountOnMessageInMemory=32maxTransferBytesOnMessageInDisk=65536maxTransferCountOnMessageInDisk=8accessMessageInMemoryMaxRatio=40messageIndexEnable=truemessageIndexSafe=falsehaMasterAddress=cleanFileForciblyEnable=false 2m-2s-async/broker-b-s.properties配置 listenPort=10915namesrvAddr=10.167.10.81:9876;10.167.10.82:9876brokerIP1=10.167.10.81autoCreateTopicEnable=falseautoCreateSubscriptionGroup=truerejectTransactionMessage=falsefetchNamesrvAddrByAddressServer=falsestorePathRootDir=/apps/apache-rocketmq/store-bstorePathCommitLog=/apps/apache-rocketmq/store-b/commitlogstorePathConsumeQueue=/apps/apache-rocketmq/store-b/consumequeuestorePathIndex=/apps/apache-rocketmq/store-b/indexstoreCheckpoint=/apps/apache-rocketmq/store-b/checkpointabortFile=/apps/apache-rocketmq/store-b/abortflushIntervalCommitLog=1000flushCommitLogTimed=falsemaxTransferBytesOnMessageInMemory=262144maxTransferCountOnMessageInMemory=32maxTransferBytesOnMessageInDisk=65536maxTransferCountOnMessageInDisk=8accessMessageInMemoryMaxRatio=40messageIndexEnable=truemessageIndexSafe=falsehaMasterAddress=cleanFileForciblyEnable=false 启动 cd /apps/apache-rocketmq/bin &amp;&amp; nohup sh mqnamesrv &amp;cd /apps/apache-rocketmq/bin &amp;&amp; nohup sh mqbroker -c /apps/apache-rocketmq/conf/2m-2s-async/broker-a.properties &amp;cd /apps/apache-rocketmq/bin &amp;&amp; nohup sh mqbroker -c /apps/apache-rocketmq/conf/2m-2s-async/broker-b-s.properties &amp; IP2配置2m-2s-async/broker-a-s.properties listenPort=10915namesrvAddr=10.167.10.81:9876;10.167.10.82:9876brokerIP1=10.167.10.82autoCreateTopicEnable=falseautoCreateSubscriptionGroup=truerejectTransactionMessage=falsefetchNamesrvAddrByAddressServer=falsestorePathRootDir=/apps/apache-rocketmq/store-astorePathCommitLog=/apps/apache-rocketmq/store-a/commitlogstorePathConsumeQueue=/apps/apache-rocketmq/store-a/consumequeuestorePathIndex=/apps/apache-rocketmq/store-a/indexstoreCheckpoint=/apps/apache-rocketmq/store-a/checkpointabortFile=/apps/apache-rocketmq/store-a/abortflushIntervalCommitLog=1000flushCommitLogTimed=falsemaxTransferBytesOnMessageInMemory=262144maxTransferCountOnMessageInMemory=32maxTransferBytesOnMessageInDisk=65536maxTransferCountOnMessageInDisk=8accessMessageInMemoryMaxRatio=40messageIndexEnable=truemessageIndexSafe=falsehaMasterAddress=cleanFileForciblyEnable=false 2m-2s-async/broker-b.properties listenPort=10911namesrvAddr=10.167.10.81:9876;10.167.10.82:9876brokerIP1=10.167.10.82autoCreateTopicEnable=falseautoCreateSubscriptionGroup=truerejectTransactionMessage=falsefetchNamesrvAddrByAddressServer=falsestorePathRootDir=/apps/apache-rocketmq/store-bstorePathCommitLog=/apps/apache-rocketmq/store-b/commitlogstorePathConsumeQueue=/apps/apache-rocketmq/store-b/consumequeuestorePathIndex=/apps/apache-rocketmq/store-b/indexstoreCheckpoint=/apps/apache-rocketmq/store-b/checkpointabortFile=/apps/apache-rocketmq/store-b/abortflushIntervalCommitLog=1000flushCommitLogTimed=falsemaxTransferBytesOnMessageInMemory=262144maxTransferCountOnMessageInMemory=32maxTransferBytesOnMessageInDisk=65536maxTransferCountOnMessageInDisk=8accessMessageInMemoryMaxRatio=40messageIndexEnable=truemessageIndexSafe=falsehaMasterAddress=cleanFileForciblyEnable=false 启动 cd /apps/apache-rocketmq/bin &amp;&amp; nohup sh mqnamesrv &amp;cd /apps/apache-rocketmq/bin &amp;&amp; nohup sh mqbroker -c /apps/apache-rocketmq/conf/2m-2s-async/broker-a-s.properties &amp;cd /apps/apache-rocketmq/bin &amp;&amp; nohup sh mqbroker -c /apps/apache-rocketmq/conf/2m-2s-async/broker-b.properties &amp;]]></content>
      <categories>
        <category>MQ</category>
      </categories>
      <tags>
        <tag>MQ</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[rocketmq-console编译安装]]></title>
    <url>%2F2018%2F12%2F20%2Frocketmq-console%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[rocketmq-console编译安装 git clone https://github.com/apache/rocketmq-externals.git vim rocketmq-console/src/main/resources/application.properties修改者两个地方rocketmq.config.namesrvAddr=192.168.56.11:9876;192.168.56.12:9876Irocketmq.config.dataPath=/home/hadmin/data/rocketmq更改内容后 cd rocketmq-console/mvn clean package -Dmaven.test.skip=true完成后cd target/找到rocketmq-console-ng-1.0.0.jar]]></content>
      <categories>
        <category>MQ</category>
      </categories>
      <tags>
        <tag>MQ</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nginx在CDN加速之后，获取用户真实IP做并发访问限制的方法]]></title>
    <url>%2F2018%2F12%2F19%2Fnginx%2F</url>
    <content type="text"><![CDATA[Nginx 有2个模块用于控制访问“数量”和“速度”，简单的说，控制你最多同时有 多少个访问，并且控制你每秒钟最多访问多少次， 你的同时并发访问不能太多，也不能太快，不然就“杀无赦”。HttpLimitZoneModule 限制同时并发访问的数量 HttpLimitReqModule 限制访问数据，每秒内最多几个请求 普通配置就是针对【用户浏览器】→【网站服务器】这种常规模式的nginx配置（没有任何CDN服务）。对单IP做访问限制，绝大多数教程都是这样写的： 用户的 IP 地址 $binary_remote_addr 作为 Key，每个 IP 地址最多有 50 个并发连接 你想开 几千个连接 刷死我？ 超过 50 个连接，直接返回 503 错误给你，根本不处理你的请求了 limit_conn_zone $binary_remote_addr zone=TotalConnLimitZone:10m ; limit_conn TotalConnLimitZone 50; limit_conn_log_level notice; 用户的 IP 地址 $binary_remote_addr 作为 Key，每个 IP 地址每秒处理 10 个请求 你想用程序每秒几百次的刷我，没戏，再快了就不处理了，直接返回 503 错误给你 limit_req_zone $binary_remote_addr zone=ConnLimitZone:10m rate=10r/s; limit_req_log_level notice; ##具体服务器配置 server { listen 80; location ~ \.php$ { 最多 5 个排队， 由于每秒处理 10 个请求 + 5个排队，你一秒最多发送 15 个请求过来，再多就直接返回 503 错误给你了 limit_req zone=ConnLimitZone burst=5 nodelay; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; include fastcgi_params; } } 用户浏览器 → CDN节点 → 网站源服务器 甚至是更复杂的模式： 用户浏览器 → CDN节点（CDN入口、CC\DDoS攻击流量清洗等） → 阿里云盾 → 源服务器 这里取得原始用户的IP地址 map $http_x_forwarded_for $clientRealIp { "" $remote_addr; ~^(?P[0-9\.]+),?.*$ $firstAddr; } 针对原始用户 IP 地址做限制 limit_conn_zone $clientRealIp zone=TotalConnLimitZone:20m ; limit_conn TotalConnLimitZone 50; limit_conn_log_level notice; 针对原始用户 IP 地址做限制 limit_req_zone $clientRealIp zone=ConnLimitZone:20m rate=10r/s; #limit_req zone=ConnLimitZone burst=10 nodelay; #如果开启此条规则，burst=10的限制将会在nginx全局生效 limit_req_log_level notice; 具体Server：如下在监听php部分新增限制规则即可 server { listen 80; location ~ \.php$ { ## 最多 5 个排队， 由于每秒处理 10 个请求 + 5个排队，你一秒最多发送 15 个请求过来，再多就直接返回 503 错误给你了 limit_req zone=ConnLimitZone burst=5 nodelay; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; include fastcgi_params; } }]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos7.4 修改MySQL5.7 root 密码]]></title>
    <url>%2F2018%2F12%2F18%2Fcentos-1%2F</url>
    <content type="text"><![CDATA[Centos7.4 修改MySQL5.7 root 密码1.vim /etc/my.cnf 2.在[mysqld]中添加 skip-grant-tables 例如： [mysqld]skip-grant-tablesdatadir=/var/lib/mysqlsocket=/var/lib/mysql/mysql.sock3.重启mysql service mysql restart 4.用户无密码登录 mysql -uroot -p (直接点击回车，密码为空) 5.选择数据库 use mysql; 6.修改root密码 update mysql.user set authentication_string=password(‘新密码’) where user=’用户’;7.执行 flush privileges; 8.退出 mysql quit 9.编辑 /etc/my.cnf 删除 skip-grant-tables 保存退出 10.重启mysql service mysql restart]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[KVM部署篇]]></title>
    <url>%2F2018%2F12%2F18%2FKVM%E9%83%A8%E7%BD%B2%E7%AF%87%2F</url>
    <content type="text"><![CDATA[KVM 介绍 KVM是以色列初创公司Qumranet开发，2008年9月RedHat公司收购了Qumranet KVM是Linux内核的一个模块，它把Linux内核变成了一个Hypervisor KVM是完全开源的，RedHat基于KVM的虚拟化解决方案叫做RHEV KVM在Linux操作系统里面以进程的形式出现，由标准的Linux调度程序进行调度，这使得KVM能够使用Linux内核的已有功能，只有一个KVM内核模块还不能实现虚拟化的全部功能，就好比操作系统只有内核还不能成为一个完整的操作系统一样 QEMU是一个开源的虚拟化软件，纯软件，可以虚拟化所以的硬件，性能不强 KVM基于QEMU开发了一个能够运行在用户空间的工具QEMU-KVM 磁盘、网络设备等都是通过QEMU-KVM这个工具模拟出来的 KVM和QEMU-KVM通信是通过/dev/kvm实现的 libvirt是用来管理KVM虚拟机的API，其命令为virsh CentOS 7.3 安装KVM 关闭 iptables 或者 firewalld 关闭 selinux 格式化新磁盘，挂载到 /kvm_data [root@test01 ~]# fdisk -l[root@test01 ~]# mkfs.ext4 /dev/sdb[root@zhdya01 ~]# blkid /dev/sdb/dev/sdb: UUID=”378895da-ded5-4312-8194-748125c795db” TYPE=”ext4”[root@test01 ~]# mount /dev/sdb /kvm_data/[root@test01 ~]# vim /etc/fstab//增加如下：/dev/sdb /kvm_data ext4 defaults 0 0下载一个centos7的镜像文件检查cpu参数是否支持虚拟化 grep -Ei ‘vmx|svm’ /proc/cpuinfo安装kvm yum install -y virt-* libvirt bridge-utils qemu-img配置网卡 增加一块虚拟网卡，目的就是为了打通宿主机和虚拟机的通信。 [root@test01 ~]# cd /etc/sysconfig/network-scripts/[root@test01 network-scripts]# cp ifcfg-ens33 ifcfg-br0[root@test01 network-scripts]# vim ifcfg-br0TYPE=BridgeBOOTPROTO=staticNAME=br0DEVICE=br0ONBOOT=yesIPADDR=192.168.161.161NETMASK=255.255.255.0GATEWAY=192.168.161.2DNS1=119.29.29.29[root@test01 network-scripts]# vim ifcfg-ens33TYPE=EthernetBOOTPROTO=staticDEVICE=ens33ONBOOT=yesBRIDGE=br0 [root@test01 ~]# ifconfigbr0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500 inet 192.168.161.161 netmask 255.255.255.0 broadcast 192.168.161.255 inet6 fe80::d80e:8ff:fe32:4775 prefixlen 64 scopeid 0x20 ether 00:0c:29:26:e9:ae txqueuelen 1000 (Ethernet) RX packets 46 bytes 4473 (4.3 KiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 46 bytes 5831 (5.6 KiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500 ether 00:0c:29:26:e9:ae txqueuelen 1000 (Ethernet) RX packets 153404 bytes 210172913 (200.4 MiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 35293 bytes 4746555 (4.5 MiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0启动libvirtd [root@test01 ~]# systemctl start libvirtd[root@test01 ~]# ps axu |grep !$ps axu |grep libvirtdroot 9127 5.1 0.4 615520 18384 ? Ssl 14:28 0:00 /usr/sbin/libvirtdroot 9260 0.0 0.0 112680 976 pts/1 S+ 14:29 0:00 grep –color=auto libvirtd查看桥接状态 [root@test01 ~]# brctl showbridge name bridge id STP enabled interfacesbr0 8000.000c2926e9ae no ens33virbr0 8000.52540058db51 yes virbr0-nic创建虚拟机并安装CentOS 7 我这边测试是使用搭建的XFTP客户端直接上传的。这样快些。也就5分钟的样子。命令行安装centos7 virt-install –name=zhdya01 –memory=512,maxmemory=1024 –vcpus=1,maxvcpus=2 –os-type=linux –os-variant=rhel7 –location=/tmp/CentOS-7.3-x86_64-DVD-1611.iso –disk path=/kvm_data/zhdya01.img,size=10 –bridge=br0 –graphics=none –console=pty,target_type=serial –extra-args=”console=tty0 console=ttyS0” virt-install :使用命令安装–name=zhdya01 ：名字为zhdya01–memory=512,maxmemory=1024 ：最小内存为512M 最大为1024M–vcpus=1,maxvcpus=2 ：最大最小CPU–os-type=linux ：系统类型–os-variant=rhel7 ：版本–location=/tmp/CentOS-7.3-x86_64-DVD-1611.iso ：镜像位置（注意你的可能和我的不一致）–disk path=/kvm_data/zhdya01.img,size=10 ：安装路径–bridge=br0 ：桥接网卡–graphics=none ：是否为图形界面（图形界面建议使用vnc软件连接）–console=pty,target_type=serial ：终端的属性–extra-args=”console=tty0 console=ttyS0”经过一段时间的硬件检查，然后到了如下这个操作界面： mark 输入对应菜单的编号回车 即可进入设置。等我们设置完每一项，在每一项的前面对应的方括号内都会变成 [X] 注意磁盘设置的时候是选择LVM还是标准分区。 等待全部设置完毕，按 b 开始安装： mark 等待安装的差不多之后就会自动重启（当然宿主机也会重新启动！）。虚拟机管理 [root@test01 network-scripts]# virsh list //查看虚拟机列表，只能看到运行的虚拟机 [root@test01 network-scripts]# virsh list –all //查看虚拟机列表，包括未运行的虚拟机test01 关闭 [root@test01 network-scripts]# virsh start zhdya01 //启动test01这个虚拟主机 v域 test01 已开始 [root@test01 network-scripts]# virsh list 1 test01 running [root@test01 network-scripts]# virsh console test01 /进入主机的控制端 连接到域 test01一般第一次进入虚拟主机，需要重新获得一个新的IP地址： [root@localhost ~]# ip addr1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000 link/ether 52:54:00:02:cf:d7 brd ff:ff:ff:ff:ff:ff [root@localhost ~]# dhclient eth0 [root@localhost ~]# ip addr1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000 link/ether 52:54:00:02:cf:d7 brd ff:ff:ff:ff:ff:ff inet 192.168.161.129/24 brd 192.168.161.255 scope global dynamic eth0这样我就获得了一个和宿主机一个网段的IP地址（当然网络也是畅通的） [root@localhost ~]# ping www.okay686.cnPING www.okay686.cn (122.190.3.199) 56(84) bytes of data.64 bytes from 122.190.3.199 (122.190.3.199): icmp_seq=1 ttl=128 time=32.7 ms64 bytes from 122.190.3.199 (122.190.3.199): icmp_seq=2 ttl=128 time=40.0 ms//安装一个net-tools 待会测试用 [root@localhost ~]# yum install -y net-tools已加载插件：fastestmirrorbase | 3.6 kB 00:00extras | 3.4 kB 00:00updates | 3.4 kB 00:00(1/4): base/7/x86_64/group_gz | 156 kB 00:01(2/4): extras/7/x86_64/primary_db | 166 kB 00:02(3/4): base/7/x86_64/primary_db | 5.7 MB 00:15更多操作经常使用的指令如下： virsh shutdown test01 //关闭虚拟机virsh start test01 //开启虚拟机virsh destroy test01 //类似stop，这个是强制停止virsh undefine test01 //彻底销毁虚拟机，会删除虚拟机配置文件，virsh list –all就看不到了ls /etc/libvirt/qemu/ //可以查看虚拟机配置文件virsh autostart test01 //宿主机开机该虚拟机也开机virsh autostart –disable test01 //解除开机启动virsh suspend test01 //挂起virsh resume test01 //恢复克隆虚拟机 克隆虚拟机举个例子就和你在Vmware上面的操作差不多，是一个原理。使用场景：当我们在一台虚拟机搭建了台LNMP服务，后期一台虚拟主机可能扛不住那么大的使用压力，我们可以再次创建一台新的虚拟机来分担。这样我们只需要克隆一台修改下配置即可，大大缩短了时间，提高了工作效率！ 首先需要把克隆的机器断电 [root@test01 ~]# virsh shutdown test01[root@test01 ~]# virt-clone –original zhdya01 –name test02 –file /kvm_data/test02正在分配 ‘test02’ | 10 GB 00:01:15成功克隆 ‘test02’。–original指定克隆源虚拟机–name指定克隆后的虚拟机名字–file指定目标虚拟机的虚拟磁盘文件 如果test01虚拟机开机状态，则提示先关闭或者暂停虚拟机 针对刚刚克隆的机器 我们去测试下 刚刚安装的 net-tools 命令是否存在 [root@test01 ~]# virsh start test02域 test02 已开始[root@test01 ~]# virsh console test02连接到域 test02[root@localhost ~]# ifconfig //可以使用，但是没有IP地址eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500 ether 52:54:00:44:3b:f6 txqueuelen 1000 (Ethernet)[root@localhost ~]# dhclient eth0[root@localhost ~]# ifconfigeth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500 inet 192.168.161.130 netmask 255.255.255.0 broadcast 192.168.161.255这样就玩成了一个虚拟主机的克隆，且也可以成功获取一个和宿主机一样的IP地址。 但是随着工作的需要，未来我们可能需要使用咱们的宿主机（类似于跳板机…）然后搞个ansible 是不是就很方便的去管理了呢？ 当然咱们的虚拟主机也可以使用 ssh 的方式去连接，没有必要使用 virsh console 这个语句了。 [root@test01 ~]# ssh-copy-id -i ./.ssh/id_rsa.pub root@192.168.161.130 //这样我们就成功的在虚拟主机上面配置了宿主机的公钥。[root@test01 ~]# ssh 192.168.161.130Last login: Sun Feb 4 17:01:00 2018[root@bogon ~]# ip addr //这样就成功的从宿主机登录到了虚拟主机。2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000 link/ether 52:54:00:44:3b:f6 brd ff:ff:ff:ff:ff:ff inet 192.168.161.130/24 brd 192.168.161.255 scope global dynamic eth0未来的工作当中，当然我们也是使用这样方式来管理虚拟主机的。快照管理 快照的功能，不多说了，很方便，公司目前几乎所有的服务器均在阿里云，有时候我们的备份方式之一就是使用快照，简单_粗暴_效率！ [root@test01 ~]# virsh snapshot-create test01 //创建一个test02的快照已生成域快照 1517735766[root@test01 ~]# virsh snapshot-list test01 //查看快照列表1517735766 2018-12-04 17:16:06 +0800 running[root@test01 ~]# qemu-img info /kvm_data/test01.imgimage: /kvm_data/test01.imgfile format: qcow2virtual size: 10G (10737418240 bytes)disk size: 1.3Gcluster_size: 65536Format specific information: compat: 1.1 lazy refcounts: truefile format: qcow2 //快照文件的类型。看到了，如上的文件类型，我就需要说下这个：raw格式的虚拟磁盘不支持做快照，qcow2支持。virsh snapshot-current test01 //查看当前快照版本[root@test01 ~]# ls /var/lib/libvirt/qemu/snapshot/ //查看所有快照配置文件（创建一次，就会在zhdya目录里面生成一个快照的配置文件）test01 test02virsh snapshot-revert test01 1517735766 //恢复指定快照[root@test01 ~]# virsh snapshot-delete test01 1517736361 //删除快照已删除域快照 1517736361]]></content>
      <categories>
        <category>虚拟化</category>
      </categories>
      <tags>
        <tag>kvm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[archives]]></title>
    <url>%2FUntitled%2Findex.html</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[about]]></title>
    <url>%2Fabout%2Findex.html</url>
    <content type="text"><![CDATA[不积跬步，无以至千里；不积小流，无以成江海。积累知识，共同进步☑90后 ☑没房 ☑没车 ☑没钱 ☑没相貌 ☑没身材 ☑没口才 ☑没经验 ☑没身份 ☑没背景 ☑没死]]></content>
  </entry>
  <entry>
    <title><![CDATA[categories]]></title>
    <url>%2Fcategories%2Findex.html</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[tags]]></title>
    <url>%2Ftags%2Findex.html</url>
    <content type="text"></content>
  </entry>
</search>
